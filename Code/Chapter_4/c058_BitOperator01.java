public class c058_BitOperator01{

	//编写一个main方法
	public static void main(String[] args){
	
		/**	原码, 反码, 补码
		 *	1 二进制的最高是符号位: 0表示正数, 1表示负数;
		 *	2 正数的原码, 反码, 补码都一样 (三码合一)
		 *	3 负数的反码 = 它的原码符号位不变, 其他位取反( 0变1,1变0)
		 *	4 负数的补码 = 它的反码 + 1, 负数的反码 = 它的补码 - 1
		 *	5 java没有无符号数,换言之,java中的数都是有符号的
		 *	6 在计算机运算的时候, 都是以补码的方式来运算
		 *	7 当我们看运算的结果,要看他的原码
		 */

		/**
		 *	1 java有7个位运算符 & | ^ ~ >> << >>>
		 *	& 按位与: 两位全为1, 结果为1, 否则为0
		 *	| 按位或: 两位有一个为1, 结果为1, 否则为0
		 *	^ 按位异或: 两位一个为0, 一个为1, 结果为1, 否则为0
		 *	~ 按位取反: 0变1, 1遍0
		 */

		//	推到过程
		//	因为计算机运算是使用补码运算,所以需要得到对应的补码
		//	1. 得到2的补码
		//		2的原码: 00000000 00000000 00000000 00000010
		//		2的反码: 00000000 00000000 00000000 00000010
		//		2的补码: 00000000 00000000 00000000 00000010
		//  2. 得到3的补码
		//		3的补码: 00000000 00000000 00000000 00000011
		//  3. 按位与&(结算结果为补码)
		//		00000000 00000000 00000000 00000010
		//		00000000 00000000 00000000 00000011
		//		-----------------------------------
		//		00000000 00000000 00000000 00000010	& 运算后的补码
		//	4. 求计算结果的原码
		//		因为结算结果首位为0,即正数,所以原码与补码一直,即:
		//		00000000 00000000 00000000 00000010 = 2
		System.out.println(2&3);	//2
		
		//	~-2 = ?	
		//	-2的原码: 10000000 00000000 00000000 00000010
		//	-2的反码: 11111111 11111111 11111111 11111101
		//	-2的补码: 11111111 11111111 11111111 11111110
		//  结果补码: 00000000 00000000 00000000 00000001
		//  结果原码: 00000000 00000000 00000000 00000001
		System.out.println(~-2);	//	1

		//	~2 = ?
		//	 2的原码: 00000000 00000000 00000000 00000010
		//	 2的反码: 00000000 00000000 00000000 00000010
		//	 2的补码: 00000000 00000000 00000000 00000010
		//	结果补码: 11111111 11111111 11111111 11111101
		//	结果反码: 11111111 11111111 11111111 11111100
		//	结果原码: 10000000 00000000 00000000 00000011
		System.out.println(~2);		//	-3

		//	2|3 = ?
		//	 2的补码: 00000000 00000000 00000000 00000010
		//	 3的补码: 00000000 00000000 00000000 00000011
		//	结果补码: 00000000 00000000 00000000 00000011
		//	结果原码: 00000000 00000000 00000000 00000011
		System.out.println(2|3);	//	3

		//	2^3 = ?
		//	 2的补码: 00000000 00000000 00000000 00000010
		//	 3的补码: 00000000 00000000 00000000 00000011
		//	结果补码: 00000000 00000000 00000000 00000001
		//	结果原码: 00000000 00000000 00000000 00000001
		System.out.println(2^3);	//	1
	}
}
